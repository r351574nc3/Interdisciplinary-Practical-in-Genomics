######################################################################
# Copyright 2010 Leo Przybylski Licensed under the
# Educational Community License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
# http://www.osedu.org/licenses/ECL-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS"
# BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing
# permissions and limitations under the License.
######################################################################
package BlastRecord;

sub new {
    my $this = bless {}, shift;

   
    $this->query(shift);
    $this->subject(shift);
    $this->identity(shift);
    $this->alignment(shift);
    $this->mismatches(shift);
    $this->qstart(shift);
    $this->qend(shift);
    $this->sstart(shift);
    $this->send(shift);
    $this->evalue(shift);
    return $this
}

sub isSelfHit {
    my $this = shift;
    $this->query() == $this->subject() ? 1 : 0;
}

sub query {
    my $this = shift;

    @_ ? $this->{_query} = shift : return $this->{_query};
}

sub subject {
    my $this = shift;

    @_ ? $this->{_subject} = shift : return $this->{_subject};
}

sub identity {
    my $this = shift;

    @_ ? $this->{_identity} = shift : return $this->{_identity};
}

sub alignment {
    my $this = shift;

    @_ ? $this->{_alignment} = shift : return $this->{_alignment};
}

sub mismatches {
    my $this = shift;

    @_ ? $this->{_mismatches} = shift : return $this->{_mismatches};
}

sub qstart {
    my $this = shift;

    @_ ? $this->{_qstart} = shift : return $this->{_qstart};
}

sub qend {
    my $this = shift;

    @_ ? $this->{_qend} = shift : return $this->{_qend};
}

sub sstart {
    my $this = shift;

    @_ ? $this->{_sstart} = shift : return $this->{_sstart};
}

sub send {
    my $this = shift;

    @_ ? $this->{_send} = shift : return $this->{_send};
}

sub evalue {
    my $this = shift;

    @_ ? $this->{_evalue} = shift : return $this->{_evalue};
}

        

return 1;
