package BlastParser;


sub new {
    my $class = shift;
    my $rh = shift;
    my $ch = shift;

#    unless ($ch) { # No comment handler
#        $ch = eval {
#            package CommentHandler;
#            @ISA = (CommentHandler);
#
#            sub new {
#                my $class = shift;
#                return bless {},  $class;
#            }
            
#            sub handleComment() {
#                my $this = shift;
#            }
#            __PACKAGE__;
#        }->new();
#    }

    return bless {_recordHandler => $rh, _commentHandler => $ch}, $class;
}


sub parse {
    my $this  = shift;
    my $input = shift;
    print "Opening $input\n";

    open(*BLASTIN, "<" . $input);
    while(<BLASTIN>) {
        chop();
        if ($this->isRecord($_)) {
            $this->recordHandler()->handleRecord($this->parseRecord($_));
        }
        elsif ($this->isComment($_)) {
            #$this->commentHandler()->handleComment();
        }
    }
    close(BLASTIN);
}

sub parseRecord {
    my $this = shift;
    return split(/\t/, shift);
}

sub isRecord {
    my $this   = shift;
    my $record = shift;
    return $record !~ /^#/? 1 : 0;
}

sub isComment {
    my $this   = shift;
    my $record = shift;
    return $record =~ /^#/? 1 : 0;
}

sub commentHandler {
    my $this = shift;

    @_ ? $this->{_commentHandler} = shift : return $this->{_commentHandler};
}

sub recordHandler {
    my $this = shift;

    @_ ? $this->{_recordHandler} = shift : return $this->{_recordHandler};
}

return 1;
