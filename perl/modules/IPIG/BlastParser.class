######################################################################
# Copyright 2010 Leo Przybylski Licensed under the
# Educational Community License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
# http://www.osedu.org/licenses/ECL-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS"
# BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing
# permissions and limitations under the License.
######################################################################
package BlastParser;

use strict;
use warnings;

BEGIN {
    require "CommentHandler.class";
    import CommentHandler;
}

sub new {
    my $class = shift;
    my $rh = shift;
    my $ch = shift;

    unless ($ch) { # No comment handler
        $ch = eval {
            package AnonCommentHandler;
            our @ISA = (qw/CommentHandler/);

            sub handleComment {
                my $this = shift;
            }
            __PACKAGE__;
        }->new();
    }

    return bless {_recordHandler => $rh, _commentHandler => $ch}, $class;
}


sub parse {
    my $this  = shift;
    my $input = shift;
    print "Opening $input\n";

    open(BLASTIN, "<" . $input);
    while(<BLASTIN>) {
        chop();
        if ($this->isRecord($_)) {
            $this->recordHandler()->handleRecord($this->parseRecord($_));
        }
        elsif ($this->isComment($_)) {
            #$this->commentHandler()->handleComment();
        }
    }
    close(BLASTIN);
}

sub parseRecord {
    my $this = shift;
    return split(/\t/, shift);
}

sub isRecord {
    my $this   = shift;
    my $record = shift;
    return $record !~ /^#/? 1 : 0;
}

sub isComment {
    my $this   = shift;
    my $record = shift;
    return $record =~ /^#/? 1 : 0;
}

sub commentHandler {
    my $this = shift;

    @_ ? $this->{_commentHandler} = shift : return $this->{_commentHandler};
}

sub recordHandler {
    my $this = shift;

    @_ ? $this->{_recordHandler} = shift : return $this->{_recordHandler};
}

return 1;
