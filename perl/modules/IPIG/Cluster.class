######################################################################
# Copyright 2010 Leo Przybylski Licensed under the
# Educational Community License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
# http://www.osedu.org/licenses/ECL-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS"
# BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing
# permissions and limitations under the License.
######################################################################
package Cluster;

=head1 Class C<Cluster>

=head2 Description

=pod

A cluster is basically like a set edges in a digraph of genes where 
adjacent edges are
grouped together. One Edge is known to be adjacent to another edge if 
...

Being that a Cluster is a Set, there is no duplication

=head3 Author: I<Leo Przybylski (przybyls@arizona.edu)>

=cut
sub new {
    my $class = shift;
    my @edges;

    return bless {_edges => \@edges}, $class;
}

=head2 Method C<add>

=pod

=head3 Parameters

=over

=item C<toadd> - 

=back

=cut
sub add {
    my $this = shift;
    my $toadd = shift;
    
    if (!$this->contains($toadd)) {
        push(@$this->edges(), shift);
    }
    
}

=head2 Method C<union>

=pod

=head3 Parameters

=over

=item C<other> - 

=back

=cut
sub union {
    my $this = shift;
    my $other = shift;
    
    my $retval = new Cluster();
}

=head2 Method C<contains>

=pod

=head3 Parameters

=over

=item C<tocompare> - 

=back

=head3 Returns

=cut
sub contains {
    my $this = shift;
    my $tocompare = shift;

    foreach my $edge (@$cluster->edges()) {
        if ($edge->equals($tocompare)) {
            return 1;
        }
    }
    return 0
}

=head2 Method C<edges>

=pod

=head3 Returns

=cut
sub edges {
    my $this = shift;

    return $this->{_edges};
}

=head2 Method C<size>

=pod

=head3 Returns

=cut
sub size {
    my $this = shift;
    
    return scalar(@$this->{_edges});
}

=head2 Method C<compareCardinality>

=pod

=head3 Parameters

=over

=item C<tocompare> - 

=back

=head3 Returns

=cut
sub compareCardinality {
    my $this = shift;
    my $tocompare = shift;
    
    if (ref $tocompare) {
        if ($this->size() == $tocompare->size()) {
            return 0;
        }
        elsif ($this->size() > $tocompare->size()) {
            return 1;
        }
        else {
            return -1;
        }
    }

    return -1;
}

return 1;
