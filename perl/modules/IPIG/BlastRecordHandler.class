######################################################################
# Copyright 2010 Leo Przybylski Licensed under the
# Educational Community License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
# http://www.osedu.org/licenses/ECL-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS"
# BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing
# permissions and limitations under the License.
######################################################################

##
# Allows for different types of record handling of Blast output. Used
# as an adapter passed to the BlastParser for different handling of 
# blast information.
#
#
# Author: Leo Przybylski (przybyls@arizona.edu)
##
package BlastRecordHandler;

BEGIN {
    require "RecordHandler.class";
    import RecordHandler;
}

@ISA = (RecordHandler);

BEGIN {
    require "BlastRecord.class";
    import BlastRecord;
}

sub new {
    my $class = shift;

    return bless {_clusters => shift}, $class;
}

sub handleRecord {
    my $this = shift;
    my $record = new BlastRecord(@_);

    return $record;
}

sub selfHit {
    my $this = shift;
    my $record = shift;

    my $cluster = new Cluster();

    # Adding self-hit to the cluster. Not sure if this is right or not.
    $cluster->add(new Edge($record));
    $this->clusters()->add($cluster));

    $this->aligment($record->alignment());
   
}

sub alignment {
    my $this = shift;

    @_ ? $this->{_alignment} = shift : return $this->{_alignment};
}

sub clusters {
    my $this = shift;
    
    @_ ? $this->{_clusters} = shift : return $this->{_clusters};
}

sub current {
    my $this = shift;
    
    @_ ? $this->{_current} = shift : return $this->{_current};
}

##
# Validates this record using the self hit alignment information. If this record is valid,
# we can use that information to determine if it is an edge or not
#
# Parameters:
#     record    - The record to validate
##
sub validateRecord {
    my $this      = shift;
    my $alignment = shift;
    my $record    = shift;
    my $valid     = 0;
    
    if ($valid) {
        # This is an edge, so use the record to create an Edge instance
        # Edges can be compared against each other to form a Cluster (Graph
        # of genes)
        my $edge = new Edge($record);
        $this->current()->add($edge);
    }
}

return 1;
